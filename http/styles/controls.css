:root {
  --size: 160px;
  --thumb-size: 28px;
  --tap-size: 44px;
  --pan: 0;
  --tilt: 0;
  --roll: 0;
  --zoom: 0;
  --autofocus: 0;
}

.control__container {
  display: flex;

  flex-flow: row wrap;
  align-items: flex-start;
  gap: 1rem;
}

.control {
  flex: 0 0 auto;
  width: min-content;

  border: 1px solid currentColor;
  word-break: break-all;
}

.control__header {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: center;
  padding: 0.3rem;

  border-bottom: 1px solid currentColor;
}

.control__name {
  margin: 0;

  font-size: 1.5em;
  font-weight: bold;
}

.control__mapping {
  flex: 0 0 auto;
}

.control__device {
  padding: 0.3rem;
  line-height: 1.4;
  border-top: 1px solid currentColor;
}

.control__controls {
  display: flex;

  flex-flow: row nowrap;
  align-items: flex-end;
}

.control__pt, .control__zoom, .control__focus {
  overflow: hidden; /* Prevent oversized tap targets from scrolling page */

  color: black;
  background: gray;
}

.control__pt {
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  flex: 0 0 auto;
  margin: 0.3rem;

  border-radius: 50%;
}

.control__pt-bg {
  --crosshair-width: 1px;

  width: var(--size);
  height: var(--size);
  box-sizing: border-box;

  overflow: hidden;

  border-radius: 50%;
  transform: rotate(calc(var(--roll) * 45deg));
  transition: transform linear 0.0333s;
}

.control__pt-bg::before, .control__pt-bg::after {
  content: '';
  display: block;
  position: relative;

  outline: var(--crosshair-width) solid currentColor;
}

.control__pt-bg::before {
  top: 50%;
  width: 100%;
  height: 0;
  box-sizing: border-box;
}

.control__pt-bg::after {
  left: 50%;
  width: 0;
  height: 100%;
  box-sizing: border-box;
}

.control__pt-joystick, .control__zoom-joystick, .control__focus-joystick {
  position: absolute;
  left: 50%;
  bottom: 50%;
  width: var(--thumb-size);
  height: var(--thumb-size);
  box-sizing: border-box;

  border-radius: 50%;
  background: currentColor;
  cursor: grab;
  transition: transform linear 0.0333s;
}

.control__pt-joystick::before, .control__zoom-joystick::before, .control__focus-joystick::before {
  content: '';
  display: block;
  position: absolute;
  left: 50%;
  top: 50%;
  box-sizing: border-box;

  transform: translate(-50%, -50%);
}

.control__pt-joystick::before {
  width: var(--size);
  height: var(--size);
  border-radius: 50%;
}

.control__zoom-joystick::before, .control__focus-joystick::before {
  width: var(--tap-size);
  height: var(--size);
  border-radius: calc(var(--tap-size) / 2);
}

.control__pt-joystick {
  transform: translate(
    calc(-50% + 0.5 * var(--pan) * calc(var(--size) - var(--thumb-size))),
    calc(50% + -0.5 * var(--tilt) * calc(var(--size) - var(--thumb-size)))
  );
}

.control__zoom, .control__focus-container {
  margin: 0.3rem;
  flex: 0 0 auto;
}

.control__focus-container {
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  gap: 0.3rem;
}

.control__zoom, .control__focus {
  position: relative;
  width: var(--thumb-size);
  height: var(--size);
  box-sizing: border-box;

  isolation: isolate;

  border-radius: calc(var(--thumb-size) / 2);
}

.control__zoom::before, .control__zoom::after, .control__focus::before, .control__focus::after {
  left: 50%;
  position: absolute;
  z-index: -1;
}

.control__zoom::before, .control__focus::before {
  top: calc(var(--thumb-size) / 2);
  transform: translate(-50%, -50%);
}

.control__zoom::after, .control__focus::after {
  bottom: calc(var(--thumb-size) / 2);
  transform: translate(-50%, 50%);
}

.control__zoom::before { content: 'T'; }
.control__zoom::after { content: 'W'; }
.control__focus::before { content: 'F'; }
.control__focus::after { content: 'N'; }

.control__zoom-joystick {
  transform: translate(
    -50%,
    calc(50% + -0.5 * var(--zoom) * calc(var(--size) - var(--thumb-size)))
  );
}

.control__focus-joystick {
  transform: translate(
    -50%,
    calc(50% + -0.5 * var(--focus) * calc(var(--size) - var(--thumb-size)))
  );
}

.control__focus-autofocus {
  filter: invert(var(--autofocus));
}
